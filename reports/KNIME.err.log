Traceback (most recent call last):
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/python/3.12.1/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
from sqlalchemy import create_engine

# baca csv, pastikan pakai separator yang sesuai
df = pd.read_csv("ecoli.csv", sep="," )   # kalau pakai koma, hapus sep=";"

# cek dulu kolomnya
print(df.head())
print(df.columns)

# koneksi ke PostgreSQL
engine = create_engine("postgresql+psycopg2://postgres:123@localhost:5432/ecoli")

# simpan ke tabel iris (replace = bikin ulang tabel kalau sudah ada)
df.to_sql("ecoli", engine, if_exists="replace", index=False)
print("Data berhasil masuk ke PostgreSQL!")
------------------

----- stdout -----
  sequence_name   mcg   gvh   lip  chg   aac  alm1  alm2 class
0     AAT_ECOLI  0.49  0.29  0.48  0.5  0.56  0.24  0.35    cp
1    ACEA_ECOLI  0.07  0.40  0.48  0.5  0.54  0.35  0.44    cp
2    ACEK_ECOLI  0.56  0.40  0.48  0.5  0.49  0.37  0.46    cp
3    ACKA_ECOLI  0.59  0.49  0.48  0.5  0.52  0.45  0.36    cp
4     ADI_ECOLI  0.23  0.32  0.48  0.5  0.55  0.25  0.35    cp
Index(['sequence_name', 'mcg', 'gvh', 'lip', 'chg', 'aac', 'alm1', 'alm2',
       'class'],
      dtype='object')
------------------

[31m---------------------------------------------------------------------------[39m
[31mOperationalError[39m                          Traceback (most recent call last)
[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/engine/base.py:143[39m, in [36mConnection.__init__[39m[34m(self, engine, connection, _has_events, _allow_revalidate, _allow_autobegin)[39m
[32m    142[39m [38;5;28;01mtry[39;00m:
[32m--> [39m[32m143[39m     [38;5;28mself[39m._dbapi_connection = [43mengine[49m[43m.[49m[43mraw_connection[49m[43m([49m[43m)[49m
[32m    144[39m [38;5;28;01mexcept[39;00m dialect.loaded_dbapi.Error [38;5;28;01mas[39;00m err:

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/engine/base.py:3301[39m, in [36mEngine.raw_connection[39m[34m(self)[39m
[32m   3280[39m [38;5;250m[39m[33;03m"""Return a "raw" DBAPI connection from the connection pool.[39;00m
[32m   3281[39m 
[32m   3282[39m [33;03mThe returned object is a proxied version of the DBAPI[39;00m
[32m   (...)[39m[32m   3299[39m 
[32m   3300[39m [33;03m"""[39;00m
[32m-> [39m[32m3301[39m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43mpool[49m[43m.[49m[43mconnect[49m[43m([49m[43m)[49m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/base.py:447[39m, in [36mPool.connect[39m[34m(self)[39m
[32m    440[39m [38;5;250m[39m[33;03m"""Return a DBAPI connection from the pool.[39;00m
[32m    441[39m 
[32m    442[39m [33;03mThe connection is instrumented such that when its[39;00m
[32m   (...)[39m[32m    445[39m 
[32m    446[39m [33;03m"""[39;00m
[32m--> [39m[32m447[39m [38;5;28;01mreturn[39;00m [43m_ConnectionFairy[49m[43m.[49m[43m_checkout[49m[43m([49m[38;5;28;43mself[39;49m[43m)[49m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/base.py:1264[39m, in [36m_ConnectionFairy._checkout[39m[34m(cls, pool, threadconns, fairy)[39m
[32m   1263[39m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m fairy:
[32m-> [39m[32m1264[39m     fairy = [43m_ConnectionRecord[49m[43m.[49m[43mcheckout[49m[43m([49m[43mpool[49m[43m)[49m
[32m   1266[39m     [38;5;28;01mif[39;00m threadconns [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/base.py:711[39m, in [36m_ConnectionRecord.checkout[39m[34m(cls, pool)[39m
[32m    710[39m [38;5;28;01melse[39;00m:
[32m--> [39m[32m711[39m     rec = [43mpool[49m[43m.[49m[43m_do_get[49m[43m([49m[43m)[49m
[32m    713[39m [38;5;28;01mtry[39;00m:

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:177[39m, in [36mQueuePool._do_get[39m[34m(self)[39m
[32m    176[39m [38;5;28;01mexcept[39;00m:
[32m--> [39m[32m177[39m [43m    [49m[38;5;28;43;01mwith[39;49;00m[43m [49m[43mutil[49m[43m.[49m[43msafe_reraise[49m[43m([49m[43m)[49m[43m:[49m
[32m    178[39m [43m        [49m[38;5;28;43mself[39;49m[43m.[49m[43m_dec_overflow[49m[43m([49m[43m)[49m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224[39m, in [36msafe_reraise.__exit__[39m[34m(self, type_, value, traceback)[39m
[32m    223[39m     [38;5;28mself[39m._exc_info = [38;5;28;01mNone[39;00m  [38;5;66;03m# remove potential circular references[39;00m
[32m--> [39m[32m224[39m     [38;5;28;01mraise[39;00m exc_value.with_traceback(exc_tb)
[32m    225[39m [38;5;28;01melse[39;00m:

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:175[39m, in [36mQueuePool._do_get[39m[34m(self)[39m
[32m    174[39m [38;5;28;01mtry[39;00m:
[32m--> [39m[32m175[39m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43m_create_connection[49m[43m([49m[43m)[49m
[32m    176[39m [38;5;28;01mexcept[39;00m:

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/base.py:388[39m, in [36mPool._create_connection[39m[34m(self)[39m
[32m    386[39m [38;5;250m[39m[33;03m"""Called by subclasses to create a new ConnectionRecord."""[39;00m
[32m--> [39m[32m388[39m [38;5;28;01mreturn[39;00m [43m_ConnectionRecord[49m[43m([49m[38;5;28;43mself[39;49m[43m)[49m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/base.py:673[39m, in [36m_ConnectionRecord.__init__[39m[34m(self, pool, connect)[39m
[32m    672[39m [38;5;28;01mif[39;00m connect:
[32m--> [39m[32m673[39m     [38;5;28;43mself[39;49m[43m.[49m[43m__connect[49m[43m([49m[43m)[49m
[32m    674[39m [38;5;28mself[39m.finalize_callback = deque()

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/base.py:899[39m, in [36m_ConnectionRecord.__connect[39m[34m(self)[39m
[32m    898[39m [38;5;28;01mexcept[39;00m [38;5;167;01mBaseException[39;00m [38;5;28;01mas[39;00m e:
[32m--> [39m[32m899[39m [43m    [49m[38;5;28;43;01mwith[39;49;00m[43m [49m[43mutil[49m[43m.[49m[43msafe_reraise[49m[43m([49m[43m)[49m[43m:[49m
[32m    900[39m [43m        [49m[43mpool[49m[43m.[49m[43mlogger[49m[43m.[49m[43mdebug[49m[43m([49m[33;43m"[39;49m[33;43mError on connect(): [39;49m[38;5;132;43;01m%s[39;49;00m[33;43m"[39;49m[43m,[49m[43m [49m[43me[49m[43m)[49m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224[39m, in [36msafe_reraise.__exit__[39m[34m(self, type_, value, traceback)[39m
[32m    223[39m     [38;5;28mself[39m._exc_info = [38;5;28;01mNone[39;00m  [38;5;66;03m# remove potential circular references[39;00m
[32m--> [39m[32m224[39m     [38;5;28;01mraise[39;00m exc_value.with_traceback(exc_tb)
[32m    225[39m [38;5;28;01melse[39;00m:

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/base.py:895[39m, in [36m_ConnectionRecord.__connect[39m[34m(self)[39m
[32m    894[39m [38;5;28mself[39m.starttime = time.time()
[32m--> [39m[32m895[39m [38;5;28mself[39m.dbapi_connection = connection = [43mpool[49m[43m.[49m[43m_invoke_creator[49m[43m([49m[38;5;28;43mself[39;49m[43m)[49m
[32m    896[39m pool.logger.debug([33m"[39m[33mCreated new connection [39m[38;5;132;01m%r[39;00m[33m"[39m, connection)

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/engine/create.py:661[39m, in [36mcreate_engine.<locals>.connect[39m[34m(connection_record)[39m
[32m    659[39m             [38;5;28;01mreturn[39;00m connection
[32m--> [39m[32m661[39m [38;5;28;01mreturn[39;00m [43mdialect[49m[43m.[49m[43mconnect[49m[43m([49m[43m*[49m[43mcargs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mcparams[49m[43m)[49m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/engine/default.py:629[39m, in [36mDefaultDialect.connect[39m[34m(self, *cargs, **cparams)[39m
[32m    627[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mconnect[39m([38;5;28mself[39m, *cargs: Any, **cparams: Any) -> DBAPIConnection:
[32m    628[39m     [38;5;66;03m# inherits the docstring from interfaces.Dialect.connect[39;00m
[32m--> [39m[32m629[39m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43mloaded_dbapi[49m[43m.[49m[43mconnect[49m[43m([49m[43m*[49m[43mcargs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mcparams[49m[43m)[49m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/psycopg2/__init__.py:122[39m, in [36mconnect[39m[34m(dsn, connection_factory, cursor_factory, **kwargs)[39m
[32m    121[39m dsn = _ext.make_dsn(dsn, **kwargs)
[32m--> [39m[32m122[39m conn = [43m_connect[49m[43m([49m[43mdsn[49m[43m,[49m[43m [49m[43mconnection_factory[49m[43m=[49m[43mconnection_factory[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwasync[49m[43m)[49m
[32m    123[39m [38;5;28;01mif[39;00m cursor_factory [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

[31mOperationalError[39m: connection to server at "localhost" (::1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?


The above exception was the direct cause of the following exception:

[31mOperationalError[39m                          Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 15[39m
[32m     12[39m engine = create_engine([33m"[39m[33mpostgresql+psycopg2://postgres:123@localhost:5432/ecoli[39m[33m"[39m)
[32m     14[39m [38;5;66;03m# simpan ke tabel iris (replace = bikin ulang tabel kalau sudah ada)[39;00m
[32m---> [39m[32m15[39m [43mdf[49m[43m.[49m[43mto_sql[49m[43m([49m[33;43m"[39;49m[33;43mecoli[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43mengine[49m[43m,[49m[43m [49m[43mif_exists[49m[43m=[49m[33;43m"[39;49m[33;43mreplace[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43mindex[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m
[32m     16[39m [38;5;28mprint[39m([33m"[39m[33mData berhasil masuk ke PostgreSQL![39m[33m"[39m)

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pandas/util/_decorators.py:333[39m, in [36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper[39m[34m(*args, **kwargs)[39m
[32m    327[39m [38;5;28;01mif[39;00m [38;5;28mlen[39m(args) > num_allow_args:
[32m    328[39m     warnings.warn(
[32m    329[39m         msg.format(arguments=_format_argument_list(allow_args)),
[32m    330[39m         [38;5;167;01mFutureWarning[39;00m,
[32m    331[39m         stacklevel=find_stack_level(),
[32m    332[39m     )
[32m--> [39m[32m333[39m [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pandas/core/generic.py:3106[39m, in [36mNDFrame.to_sql[39m[34m(self, name, con, schema, if_exists, index, index_label, chunksize, dtype, method)[39m
[32m   2908[39m [38;5;250m[39m[33;03m"""[39;00m
[32m   2909[39m [33;03mWrite records stored in a DataFrame to a SQL database.[39;00m
[32m   2910[39m 
[32m   (...)[39m[32m   3102[39m [33;03m[(1,), (None,), (2,)][39;00m
[32m   3103[39m [33;03m"""[39;00m  [38;5;66;03m# noqa: E501[39;00m
[32m   3104[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mpandas[39;00m[34;01m.[39;00m[34;01mio[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m sql
[32m-> [39m[32m3106[39m [38;5;28;01mreturn[39;00m [43msql[49m[43m.[49m[43mto_sql[49m[43m([49m
[32m   3107[39m [43m    [49m[38;5;28;43mself[39;49m[43m,[49m
[32m   3108[39m [43m    [49m[43mname[49m[43m,[49m
[32m   3109[39m [43m    [49m[43mcon[49m[43m,[49m
[32m   3110[39m [43m    [49m[43mschema[49m[43m=[49m[43mschema[49m[43m,[49m
[32m   3111[39m [43m    [49m[43mif_exists[49m[43m=[49m[43mif_exists[49m[43m,[49m
[32m   3112[39m [43m    [49m[43mindex[49m[43m=[49m[43mindex[49m[43m,[49m
[32m   3113[39m [43m    [49m[43mindex_label[49m[43m=[49m[43mindex_label[49m[43m,[49m
[32m   3114[39m [43m    [49m[43mchunksize[49m[43m=[49m[43mchunksize[49m[43m,[49m
[32m   3115[39m [43m    [49m[43mdtype[49m[43m=[49m[43mdtype[49m[43m,[49m
[32m   3116[39m [43m    [49m[43mmethod[49m[43m=[49m[43mmethod[49m[43m,[49m
[32m   3117[39m [43m[49m[43m)[49m

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pandas/io/sql.py:843[39m, in [36mto_sql[39m[34m(frame, name, con, schema, if_exists, index, index_label, chunksize, dtype, method, engine, **engine_kwargs)[39m
[32m    838[39m [38;5;28;01melif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(frame, DataFrame):
[32m    839[39m     [38;5;28;01mraise[39;00m [38;5;167;01mNotImplementedError[39;00m(
[32m    840[39m         [33m"[39m[33m'[39m[33mframe[39m[33m'[39m[33m argument should be either a Series or a DataFrame[39m[33m"[39m
[32m    841[39m     )
[32m--> [39m[32m843[39m [38;5;28;01mwith[39;00m [43mpandasSQL_builder[49m[43m([49m[43mcon[49m[43m,[49m[43m [49m[43mschema[49m[43m=[49m[43mschema[49m[43m,[49m[43m [49m[43mneed_transaction[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m [38;5;28;01mas[39;00m pandas_sql:
[32m    844[39m     [38;5;28;01mreturn[39;00m pandas_sql.to_sql(
[32m    845[39m         frame,
[32m    846[39m         name,
[32m   (...)[39m[32m    855[39m         **engine_kwargs,
[32m    856[39m     )

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pandas/io/sql.py:908[39m, in [36mpandasSQL_builder[39m[34m(con, schema, need_transaction)[39m
[32m    905[39m     [38;5;28;01mraise[39;00m [38;5;167;01mImportError[39;00m([33m"[39m[33mUsing URI string without sqlalchemy installed.[39m[33m"[39m)
[32m    907[39m [38;5;28;01mif[39;00m sqlalchemy [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m [38;5;28misinstance[39m(con, ([38;5;28mstr[39m, sqlalchemy.engine.Connectable)):
[32m--> [39m[32m908[39m     [38;5;28;01mreturn[39;00m [43mSQLDatabase[49m[43m([49m[43mcon[49m[43m,[49m[43m [49m[43mschema[49m[43m,[49m[43m [49m[43mneed_transaction[49m[43m)[49m
[32m    910[39m adbc = import_optional_dependency([33m"[39m[33madbc_driver_manager.dbapi[39m[33m"[39m, errors=[33m"[39m[33mignore[39m[33m"[39m)
[32m    911[39m [38;5;28;01mif[39;00m adbc [38;5;129;01mand[39;00m [38;5;28misinstance[39m(con, adbc.Connection):

[36mFile [39m[32m~/.local/lib/python3.12/site-packages/pandas/io/sql.py:1648[39m, in [36mSQLDatabase.__init__[39m[34m(self, con, schema, need_transaction)[39m
[32m   1646[39m     [38;5;28mself[39m.exit_stack.callback(con.dispose)
[32m   1647[39m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(con, Engine):
[32m-> [39m[32m1648[39m     con = [38;5;28mself[39m.exit_stack.enter_context([43mcon[49m[43m.[49m[43mconnect[49m[43m([49m[43m)[49m)
[32m   1649[39m [38;5;28;01mif[39;00m need_transaction [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m con.in_transaction():
[32m   1650[39m     [38;5;28mself[39m.exit_stack.enter_context(con.begin())

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/engine/base.py:3277[39m, in [36mEngine.connect[39m[34m(self)[39m
[32m   3254[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mconnect[39m([38;5;28mself[39m) -> Connection:
[32m   3255[39m [38;5;250m    [39m[33;03m"""Return a new :class:`_engine.Connection` object.[39;00m
[32m   3256[39m 
[32m   3257[39m [33;03m    The :class:`_engine.Connection` acts as a Python context manager, so[39;00m
[32m   (...)[39m[32m   3274[39m 
[32m   3275[39m [33;03m    """[39;00m
[32m-> [39m[32m3277[39m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43m_connection_cls[49m[43m([49m[38;5;28;43mself[39;49m[43m)[49m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/engine/base.py:145[39m, in [36mConnection.__init__[39m[34m(self, engine, connection, _has_events, _allow_revalidate, _allow_autobegin)[39m
[32m    143[39m         [38;5;28mself[39m._dbapi_connection = engine.raw_connection()
[32m    144[39m     [38;5;28;01mexcept[39;00m dialect.loaded_dbapi.Error [38;5;28;01mas[39;00m err:
[32m--> [39m[32m145[39m         [43mConnection[49m[43m.[49m[43m_handle_dbapi_exception_noconnection[49m[43m([49m
[32m    146[39m [43m            [49m[43merr[49m[43m,[49m[43m [49m[43mdialect[49m[43m,[49m[43m [49m[43mengine[49m
[32m    147[39m [43m        [49m[43m)[49m
[32m    148[39m         [38;5;28;01mraise[39;00m
[32m    149[39m [38;5;28;01melse[39;00m:

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2440[39m, in [36mConnection._handle_dbapi_exception_noconnection[39m[34m(cls, e, dialect, engine, is_disconnect, invalidate_pool_on_disconnect, is_pre_ping)[39m
[32m   2438[39m [38;5;28;01melif[39;00m should_wrap:
[32m   2439[39m     [38;5;28;01massert[39;00m sqlalchemy_exception [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[32m-> [39m[32m2440[39m     [38;5;28;01mraise[39;00m sqlalchemy_exception.with_traceback(exc_info[[32m2[39m]) [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01me[39;00m
[32m   2441[39m [38;5;28;01melse[39;00m:
[32m   2442[39m     [38;5;28;01massert[39;00m exc_info[[32m1[39m] [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/engine/base.py:143[39m, in [36mConnection.__init__[39m[34m(self, engine, connection, _has_events, _allow_revalidate, _allow_autobegin)[39m
[32m    141[39m [38;5;28;01mif[39;00m connection [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m    142[39m     [38;5;28;01mtry[39;00m:
[32m--> [39m[32m143[39m         [38;5;28mself[39m._dbapi_connection = [43mengine[49m[43m.[49m[43mraw_connection[49m[43m([49m[43m)[49m
[32m    144[39m     [38;5;28;01mexcept[39;00m dialect.loaded_dbapi.Error [38;5;28;01mas[39;00m err:
[32m    145[39m         Connection._handle_dbapi_exception_noconnection(
[32m    146[39m             err, dialect, engine
[32m    147[39m         )

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/engine/base.py:3301[39m, in [36mEngine.raw_connection[39m[34m(self)[39m
[32m   3279[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mraw_connection[39m([38;5;28mself[39m) -> PoolProxiedConnection:
[32m   3280[39m [38;5;250m    [39m[33;03m"""Return a "raw" DBAPI connection from the connection pool.[39;00m
[32m   3281[39m 
[32m   3282[39m [33;03m    The returned object is a proxied version of the DBAPI[39;00m
[32m   (...)[39m[32m   3299[39m 
[32m   3300[39m [33;03m    """[39;00m
[32m-> [39m[32m3301[39m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43mpool[49m[43m.[49m[43mconnect[49m[43m([49m[43m)[49m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/base.py:447[39m, in [36mPool.connect[39m[34m(self)[39m
[32m    439[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mconnect[39m([38;5;28mself[39m) -> PoolProxiedConnection:
[32m    440[39m [38;5;250m    [39m[33;03m"""Return a DBAPI connection from the pool.[39;00m
[32m    441[39m 
[32m    442[39m [33;03m    The connection is instrumented such that when its[39;00m
[32m   (...)[39m[32m    445[39m 
[32m    446[39m [33;03m    """[39;00m
[32m--> [39m[32m447[39m     [38;5;28;01mreturn[39;00m [43m_ConnectionFairy[49m[43m.[49m[43m_checkout[49m[43m([49m[38;5;28;43mself[39;49m[43m)[49m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/base.py:1264[39m, in [36m_ConnectionFairy._checkout[39m[34m(cls, pool, threadconns, fairy)[39m
[32m   1256[39m [38;5;129m@classmethod[39m
[32m   1257[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m_checkout[39m(
[32m   1258[39m     [38;5;28mcls[39m,
[32m   (...)[39m[32m   1261[39m     fairy: Optional[_ConnectionFairy] = [38;5;28;01mNone[39;00m,
[32m   1262[39m ) -> _ConnectionFairy:
[32m   1263[39m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m fairy:
[32m-> [39m[32m1264[39m         fairy = [43m_ConnectionRecord[49m[43m.[49m[43mcheckout[49m[43m([49m[43mpool[49m[43m)[49m
[32m   1266[39m         [38;5;28;01mif[39;00m threadconns [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m   1267[39m             threadconns.current = weakref.ref(fairy)

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/base.py:711[39m, in [36m_ConnectionRecord.checkout[39m[34m(cls, pool)[39m
[32m    709[39m     rec = cast(_ConnectionRecord, pool._do_get())
[32m    710[39m [38;5;28;01melse[39;00m:
[32m--> [39m[32m711[39m     rec = [43mpool[49m[43m.[49m[43m_do_get[49m[43m([49m[43m)[49m
[32m    713[39m [38;5;28;01mtry[39;00m:
[32m    714[39m     dbapi_connection = rec.get_connection()

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:177[39m, in [36mQueuePool._do_get[39m[34m(self)[39m
[32m    175[39m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m._create_connection()
[32m    176[39m [38;5;28;01mexcept[39;00m:
[32m--> [39m[32m177[39m [43m    [49m[38;5;28;43;01mwith[39;49;00m[43m [49m[43mutil[49m[43m.[49m[43msafe_reraise[49m[43m([49m[43m)[49m[43m:[49m
[32m    178[39m [43m        [49m[38;5;28;43mself[39;49m[43m.[49m[43m_dec_overflow[49m[43m([49m[43m)[49m
[32m    179[39m     [38;5;28;01mraise[39;00m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224[39m, in [36msafe_reraise.__exit__[39m[34m(self, type_, value, traceback)[39m
[32m    222[39m     [38;5;28;01massert[39;00m exc_value [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[32m    223[39m     [38;5;28mself[39m._exc_info = [38;5;28;01mNone[39;00m  [38;5;66;03m# remove potential circular references[39;00m
[32m--> [39m[32m224[39m     [38;5;28;01mraise[39;00m exc_value.with_traceback(exc_tb)
[32m    225[39m [38;5;28;01melse[39;00m:
[32m    226[39m     [38;5;28mself[39m._exc_info = [38;5;28;01mNone[39;00m  [38;5;66;03m# remove potential circular references[39;00m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:175[39m, in [36mQueuePool._do_get[39m[34m(self)[39m
[32m    173[39m [38;5;28;01mif[39;00m [38;5;28mself[39m._inc_overflow():
[32m    174[39m     [38;5;28;01mtry[39;00m:
[32m--> [39m[32m175[39m         [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43m_create_connection[49m[43m([49m[43m)[49m
[32m    176[39m     [38;5;28;01mexcept[39;00m:
[32m    177[39m         [38;5;28;01mwith[39;00m util.safe_reraise():

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/base.py:388[39m, in [36mPool._create_connection[39m[34m(self)[39m
[32m    385[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m_create_connection[39m([38;5;28mself[39m) -> ConnectionPoolEntry:
[32m    386[39m [38;5;250m    [39m[33;03m"""Called by subclasses to create a new ConnectionRecord."""[39;00m
[32m--> [39m[32m388[39m     [38;5;28;01mreturn[39;00m [43m_ConnectionRecord[49m[43m([49m[38;5;28;43mself[39;49m[43m)[49m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/base.py:673[39m, in [36m_ConnectionRecord.__init__[39m[34m(self, pool, connect)[39m
[32m    671[39m [38;5;28mself[39m.__pool = pool
[32m    672[39m [38;5;28;01mif[39;00m connect:
[32m--> [39m[32m673[39m     [38;5;28;43mself[39;49m[43m.[49m[43m__connect[49m[43m([49m[43m)[49m
[32m    674[39m [38;5;28mself[39m.finalize_callback = deque()

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/base.py:899[39m, in [36m_ConnectionRecord.__connect[39m[34m(self)[39m
[32m    897[39m     [38;5;28mself[39m.fresh = [38;5;28;01mTrue[39;00m
[32m    898[39m [38;5;28;01mexcept[39;00m [38;5;167;01mBaseException[39;00m [38;5;28;01mas[39;00m e:
[32m--> [39m[32m899[39m [43m    [49m[38;5;28;43;01mwith[39;49;00m[43m [49m[43mutil[49m[43m.[49m[43msafe_reraise[49m[43m([49m[43m)[49m[43m:[49m
[32m    900[39m [43m        [49m[43mpool[49m[43m.[49m[43mlogger[49m[43m.[49m[43mdebug[49m[43m([49m[33;43m"[39;49m[33;43mError on connect(): [39;49m[38;5;132;43;01m%s[39;49;00m[33;43m"[39;49m[43m,[49m[43m [49m[43me[49m[43m)[49m
[32m    901[39m [38;5;28;01melse[39;00m:
[32m    902[39m     [38;5;66;03m# in SQLAlchemy 1.4 the first_connect event is not used by[39;00m
[32m    903[39m     [38;5;66;03m# the engine, so this will usually not be set[39;00m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:224[39m, in [36msafe_reraise.__exit__[39m[34m(self, type_, value, traceback)[39m
[32m    222[39m     [38;5;28;01massert[39;00m exc_value [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[32m    223[39m     [38;5;28mself[39m._exc_info = [38;5;28;01mNone[39;00m  [38;5;66;03m# remove potential circular references[39;00m
[32m--> [39m[32m224[39m     [38;5;28;01mraise[39;00m exc_value.with_traceback(exc_tb)
[32m    225[39m [38;5;28;01melse[39;00m:
[32m    226[39m     [38;5;28mself[39m._exc_info = [38;5;28;01mNone[39;00m  [38;5;66;03m# remove potential circular references[39;00m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/pool/base.py:895[39m, in [36m_ConnectionRecord.__connect[39m[34m(self)[39m
[32m    893[39m [38;5;28;01mtry[39;00m:
[32m    894[39m     [38;5;28mself[39m.starttime = time.time()
[32m--> [39m[32m895[39m     [38;5;28mself[39m.dbapi_connection = connection = [43mpool[49m[43m.[49m[43m_invoke_creator[49m[43m([49m[38;5;28;43mself[39;49m[43m)[49m
[32m    896[39m     pool.logger.debug([33m"[39m[33mCreated new connection [39m[38;5;132;01m%r[39;00m[33m"[39m, connection)
[32m    897[39m     [38;5;28mself[39m.fresh = [38;5;28;01mTrue[39;00m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/engine/create.py:661[39m, in [36mcreate_engine.<locals>.connect[39m[34m(connection_record)[39m
[32m    658[39m         [38;5;28;01mif[39;00m connection [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m    659[39m             [38;5;28;01mreturn[39;00m connection
[32m--> [39m[32m661[39m [38;5;28;01mreturn[39;00m [43mdialect[49m[43m.[49m[43mconnect[49m[43m([49m[43m*[49m[43mcargs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mcparams[49m[43m)[49m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/sqlalchemy/engine/default.py:629[39m, in [36mDefaultDialect.connect[39m[34m(self, *cargs, **cparams)[39m
[32m    627[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mconnect[39m([38;5;28mself[39m, *cargs: Any, **cparams: Any) -> DBAPIConnection:
[32m    628[39m     [38;5;66;03m# inherits the docstring from interfaces.Dialect.connect[39;00m
[32m--> [39m[32m629[39m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43mloaded_dbapi[49m[43m.[49m[43mconnect[49m[43m([49m[43m*[49m[43mcargs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mcparams[49m[43m)[49m

[36mFile [39m[32m/usr/local/python/3.12.1/lib/python3.12/site-packages/psycopg2/__init__.py:122[39m, in [36mconnect[39m[34m(dsn, connection_factory, cursor_factory, **kwargs)[39m
[32m    119[39m     kwasync[[33m'[39m[33masync_[39m[33m'[39m] = kwargs.pop([33m'[39m[33masync_[39m[33m'[39m)
[32m    121[39m dsn = _ext.make_dsn(dsn, **kwargs)
[32m--> [39m[32m122[39m conn = [43m_connect[49m[43m([49m[43mdsn[49m[43m,[49m[43m [49m[43mconnection_factory[49m[43m=[49m[43mconnection_factory[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwasync[49m[43m)[49m
[32m    123[39m [38;5;28;01mif[39;00m cursor_factory [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m    124[39m     conn.cursor_factory = cursor_factory

[31mOperationalError[39m: (psycopg2.OperationalError) connection to server at "localhost" (::1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?
connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?

(Background on this error at: https://sqlalche.me/e/20/e3q8)

